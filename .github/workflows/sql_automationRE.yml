name: SQL Server Automation

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Pinggy
      run: |
        # Install Pinggy properly on Windows
        curl -fsSL https://pinggy.io/install.sh | bash
        echo "$HOME/.local/bin" >> $env:GITHUB_PATH
        pinggy --version

    - name: Start authenticated tunnel
      run: |
        # Create config directory and set token
        mkdir -p "$HOME/.config/pinggy"
        echo "token: ${{ secrets.PINGGY_TOKEN }}" > "$HOME/.config/pinggy/config.yaml"
        
        # Start tunnel and wait for connection
        Start-Process -NoNewWindow -FilePath "pinggy" -ArgumentList "tcp 1433 --log pinggy.log" -RedirectStandardOutput "pinggy_url.txt"
        
        # Wait for URL to be generated
        $timeout = 30
        $startTime = Get-Date
        while (-not (Test-Path "pinggy_url.txt") {
            if (((Get-Date) - $startTime).TotalSeconds -gt $timeout) {
                Write-Error "Timeout waiting for pinggy tunnel"
                exit 1
            }
            Start-Sleep -Seconds 2
        }
        
        # Display connection info
        Get-Content pinggy_url.txt

    - name: Setup SQL Database
      env:
        SA_PASSWORD: ${{ secrets.SQL_SA_PASSWORD }}
        SQL_USER_PASSWORD: ${{ secrets.SQL_USER_PASSWORD }}
      run: |
        Write-Output "Waiting for SQL Server..."
        $retryCount = 0
        $maxRetries = 30
        
        while ($retryCount -lt $maxRetries) {
            try {
                Invoke-Sqlcmd -Query "SELECT 1" -ServerInstance "localhost" -Username "sa" -Password "$env:SA_PASSWORD" -ErrorAction Stop
                break
            }
            catch {
                $retryCount++
                Start-Sleep -Seconds 2
            }
        }

        Invoke-Sqlcmd -Query @"
        CREATE DATABASE AutoTestDB;
        GO
        USE AutoTestDB;
        GO
        CREATE LOGIN Auto_user WITH PASSWORD = '$($env:SQL_USER_PASSWORD)';
        CREATE USER Auto_user FOR LOGIN Auto_user;
        EXEC sp_addrolemember 'db_owner', 'Auto_user';
        GO
        CREATE TABLE [user] (
            Id INT IDENTITY(1,1) PRIMARY KEY,
            Name NVARCHAR(100) NOT NULL,
            Surname NVARCHAR(100) NOT NULL,
            Email NVARCHAR(255) NOT NULL UNIQUE
        );
        GO
        CREATE PROCEDURE InsertUser
            @Name NVARCHAR(100),
            @Surname NVARCHAR(100),
            @Email NVARCHAR(255)
        AS
        BEGIN
            INSERT INTO [user] (Name, Surname, Email)
            VALUES (@Name, @Surname, @Email);
        END
        GO
        EXEC InsertUser 'Admin', 'User', 'admin@example.com';
        EXEC InsertUser 'John', 'Doe', 'john@example.com';
        GO
        "@ -ServerInstance "localhost" -Username "sa" -Password "$env:SA_PASSWORD"

    - name: Show connection info
      run: |
        $url = Select-String -Path "pinggy_url.txt" -Pattern "tcp://[^ ]*" | ForEach-Object { $_.Matches.Value }
        Write-Output "âœ… Database ready at: $url"
        Write-Output "ðŸ‘¤ Login: Auto_user"
        Write-Output "ðŸ”‘ Password: ${{ secrets.SQL_USER_PASSWORD }}"
