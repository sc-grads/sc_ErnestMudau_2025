name: Database Automation with SQL Server & Pinggy

on:
  workflow_dispatch:

env:
  SA_PASSWORD: ${{ secrets.SQL_SA_PASSWORD }}
  SQL_USER_PASSWORD: ${{ secrets.SQL_USER_PASSWORD }}
  PINGGY_TOKEN: ${{ secrets.PINGGY_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 1: Start SQL Server in Docker with proper configuration
    - name: Start SQL Server container
      run: |
        docker run -d \
          --name sqlserver \
          -e "ACCEPT_EULA=Y" \
          -e "SA_PASSWORD=${{ secrets.SQL_SA_PASSWORD }}" \
          -e "MSSQL_PID=Express" \
          -p 1433:1433 \
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P '${{ secrets.SQL_SA_PASSWORD }}' -Q 'SELECT 1'" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 10 \
          mcr.microsoft.com/mssql/server:2019-latest

        # Wait for container to be healthy
        timeout 300 bash -c 'until docker inspect --format "{{json .State.Health.Status}}" sqlserver | grep -q "healthy"; do sleep 5; echo "Waiting for SQL Server to start..."; done'
        
    # Step 2: Initialize Database
    - name: Create database and user
      run: |
        docker exec sqlserver /opt/mssql-tools/bin/sqlcmd \
          -S localhost -U SA -P "${{ secrets.SQL_SA_PASSWORD }}" \
          -Q "CREATE DATABASE AutoTestDB;
              CREATE LOGIN Auto_user WITH PASSWORD = '${{ secrets.SQL_USER_PASSWORD }}';
              USE AutoTestDB;
              CREATE USER Auto_user FOR LOGIN Auto_user;
              EXEC sp_addrolemember 'db_owner', 'Auto_user';"

    # Step 3: Set up Pinggy tunnel
    - name: Start Pinggy tunnel
      run: |
        curl -fsSL https://pinggy.io/install.sh | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        mkdir -p ~/.config/pinggy
        echo "token: ${{ secrets.PINGGY_TOKEN }}" > ~/.config/pinggy/config.yaml
        pinggy tcp 1433 --log pinggy.log > pinggy_url.txt &
        sleep 10
        PINGGY_URL=$(grep -o "tcp://[^ ]*" pinggy_url.txt | head -n 1)
        echo "PUBLIC_URL=$PINGGY_URL" >> $GITHUB_ENV
        cat pinggy_url.txt

    # Step 4: Show connection info
    - name: Display connection details
      run: |
        echo "âœ… Deployment Successful"
        echo "======================"
        echo "Public SQL Server URL: $PUBLIC_URL"
        echo "Database: AutoTestDB"
        echo "Username: Auto_user"
        echo "Password: ${{ secrets.SQL_USER_PASSWORD }}"
        echo ""
        echo "ðŸ“Œ Connection string:"
        echo "Server=${PUBLIC_URL#tcp://};Database=AutoTestDB;User Id=Auto_user;Password=${{ secrets.SQL_USER_PASSWORD }};"
