name: Deploy SQL Agent Jobs

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install sqlcmd with retry and validation
        run: |
          $maxAttempts = 3
          $attempt = 1
          $success = $false

          while ($attempt -le $maxAttempts -and -not $success) {
            try {
              Write-Host "Attempt $attempt of $maxAttempts - Downloading sqlcmd.zip from https://aka.ms/download-sqlcmd"
              Invoke-WebRequest -Uri "https://aka.ms/download-sqlcmd" -OutFile "sqlcmd.zip" -ErrorAction Stop
              Write-Host "Download successful. Validating file..."
              if (Test-Path "sqlcmd.zip" -PathType Leaf) {
                $shell = New-Object -ComObject Shell.Application
                $zip = $shell.NameSpace((Get-Item "sqlcmd.zip").FullName)
                if ($zip -eq $null) {
                  throw "ZIP file is invalid or empty."
                }
                Write-Host "File validation passed. Extracting sqlcmd.zip..."
                Expand-Archive -Path "sqlcmd.zip" -DestinationPath "C:\sqlcmd" -ErrorAction Stop
                Write-Host "Extraction complete. Adding C:\sqlcmd to PATH..."
                echo "C:\sqlcmd" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                Write-Host "sqlcmd installation completed."
                $success = $true
              } else {
                throw "Downloaded file sqlcmd.zip does not exist."
              }
            } catch {
              Write-Host "Attempt $attempt failed: $_"
              if ($attempt -eq $maxAttempts) {
                Write-Host "All attempts failed. Exiting with error."
                exit 1
              }
              $attempt++
              Start-Sleep -Seconds 10  # Wait 10 seconds before retrying
            }
          }

      - name: Deploy All SQL Agent Jobs
        env:
          SQL_SERVER: ${{ secrets.TIMESHEETDB_SQL_SERVER_PUBLIC_URL }}
          SQL_USER: ${{ secrets.TIMESHEETDB_SQL_USER }}
          SQL_PASSWORD: ${{ secrets.TIMESHEETDB_SQL_PASSWORD }}
        run: |
          sqlcmd -S "$env:SQL_SERVER" -U "$env:SQL_USER" -P "$env:SQL_PASSWORD" -d msdb -i "HandsOnProjects/Timesheet/sql scripts/DeployAllJobs.sql"
